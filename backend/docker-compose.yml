version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: beerflow-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: mattia
      POSTGRES_DB: beerflow_dev
    ports:
      - '5432:5432'
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - beerflow-network

  redis:
    image: redis:7-alpine
    container_name: beerflow-redis
    ports:
      - '6379:6379'
    volumes:
      - redis-data:/data
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - beerflow-network

  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: beerflow-backend
    environment:
      NODE_ENV: production
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_USERNAME: postgres
      DATABASE_PASSWORD: mattia
      DATABASE_NAME: beerflow_dev
      JWT_SECRET: beerflow_jwt_secret_2024_ultra_secure_key
      JWT_EXPIRES_IN: 7d
      PORT: 3000
      CORS_ORIGIN: http://localhost:5173
    ports:
      - '3000:3000'
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ['CMD', 'node', '-e', "require('http').get('http://localhost:3000/api/v1/health/live', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 40s
    networks:
      - beerflow-network
    restart: unless-stopped

volumes:
  postgres-data:
  redis-data:

networks:
  beerflow-network:
    driver: bridge
